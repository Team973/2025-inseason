// public class CANdle
// extends Object
// CTRE CANdle Device for controlling LEDs from the CAN bus.

//  // Example usage of a CANdle
//  CANdle candle = new CANdle(0); // creates a new CANdle with ID 0 done

//  CANdleConfiguration config = new CANdleConfiguration();
//  config.stripType = LEDStripType.RGB; // set the strip type to RGB
//  config.brightnessScalar = 0.5; // dim the LEDs to half brightness
//  candle.configAllSettings(config);

//  candle.setLEDs(255, 255, 255); // set the CANdle LEDs to white

//  // create a rainbow animation:
//  // - max brightness
//  // - half speed
//  // - 64 LEDs
//  RainbowAnimation rainbowAnim = new RainbowAnimation(1, 0.5, 64);
//  candle.animate(rainbowAnim);

//  ErrorCode error = candle.getLastError(); // gets the last error generated by the CANdle
//  CANdleFaults faults = new CANdleFaults();
//  ErrorCode faultsError = candle.getFaults(faults); // fills faults with the current CANdle
// faults; returns the last error generated

package com.team973.frc2025.subsystems;

import com.ctre.phoenix.ErrorCode;
import com.ctre.phoenix.led.CANdle;
import com.ctre.phoenix.led.CANdle.LEDStripType;
import com.ctre.phoenix.led.CANdleConfiguration;
import com.ctre.phoenix.led.CANdleFaults;
import com.ctre.phoenix.led.RainbowAnimation;

public class LED {
  // double currentTimeStampMS = Conversions;

  int m_cycleCount = 0;

  CANdle m_candle = new CANdle(18, "");
  ErrorCode error = m_candle.getLastError(); // gets the last error generated by the CANdle
  CANdleFaults faults = new CANdleFaults();
  ErrorCode faultsError =
      m_candle.getFaults(
          faults); // fills faults with the current CANdle faults; returns the last error generated
  CANdleConfiguration config = new CANdleConfiguration();

  public LED() {
    m_candle.configFactoryDefault();
    config.stripType = LEDStripType.RGB; // set the strip type to RGB
    config.brightnessScalar = 0.5; // dim the LEDs to half brightness
    m_candle.configAllSettings(config);
  }

  public void setLEDColor(int r, int g, int b) {
    m_candle.setLEDs(r, g, b);
  }

  public void LEDRainbow() {
    RainbowAnimation rainbowAnim = new RainbowAnimation(1, 0.5, 64);
    m_candle.animate(rainbowAnim);
  }

  public void lowBattery() {
    if (m_cycleCount % 50 == 0) {
      setLEDColor(255, 0, 0);
    } else if (m_cycleCount % 25 == 0) {
      setLEDColor(0, 0, 0);
    }
    m_cycleCount++;
  }

  public void hasGamePiece() {
    setLEDColor(0, 255, 0);
  }

  public void timeConcept() {}
}
